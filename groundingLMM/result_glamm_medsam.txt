ERROR: Unable to locate a modulefile for 'cuda/11.4'
no change     /home/user01/miniconda3/condabin/conda
no change     /home/user01/miniconda3/bin/conda
no change     /home/user01/miniconda3/bin/conda-env
no change     /home/user01/miniconda3/bin/activate
no change     /home/user01/miniconda3/bin/deactivate
no change     /home/user01/miniconda3/etc/profile.d/conda.sh
no change     /home/user01/miniconda3/etc/fish/conf.d/conda.fish
no change     /home/user01/miniconda3/shell/condabin/Conda.psm1
no change     /home/user01/miniconda3/shell/condabin/conda-hook.ps1
no change     /home/user01/miniconda3/lib/python3.12/site-packages/xontrib/conda.xsh
no change     /home/user01/miniconda3/etc/profile.d/conda.csh
no change     /home/user01/.bashrc
No action taken.
Start to activate glamm
Thu Sep 12 14:10:48 2024       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.141.03   Driver Version: 470.141.03   CUDA Version: 11.4     |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|                               |                      |               MIG M. |
|===============================+======================+======================|
|   0  NVIDIA A100-SXM...  On   | 00000000:07:00.0 Off |                    0 |
| N/A   36C    P0    67W / 400W |      0MiB / 81251MiB |      0%      Default |
|                               |                      |             Disabled |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                                  |
|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |
|        ID   ID                                                   Usage      |
|=============================================================================|
|  No running processes found                                                 |
+-----------------------------------------------------------------------------+
[2024-09-12 14:10:49,991] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
--------------------------------------------------
DeepSpeed C++/CUDA extension op report
--------------------------------------------------
NOTE: Ops not installed will be just-in-time (JIT) compiled at
      runtime if needed. Op compatibility means that your system
      meet the required dependencies to JIT install the op.
--------------------------------------------------
JIT compiled ops requires ninja
ninja .................. [92m[OKAY][0m
--------------------------------------------------
op name ................ installed .. compatible
--------------------------------------------------
[93m [WARNING] [0m async_io requires the dev libaio .so object and headers but these were not found.
[93m [WARNING] [0m async_io: please install the libaio-dev package with apt
[93m [WARNING] [0m If libaio is already installed (perhaps from source), try setting the CFLAGS and LDFLAGS environment variables to where it can be found.
async_io ............... [93m[NO][0m ....... [93m[NO][0m
fused_adam ............. [93m[NO][0m ....... [92m[OKAY][0m
cpu_adam ............... [93m[NO][0m ....... [92m[OKAY][0m
cpu_adagrad ............ [93m[NO][0m ....... [92m[OKAY][0m
cpu_lion ............... [93m[NO][0m ....... [92m[OKAY][0m
[93m [WARNING] [0m Please specify the CUTLASS repo directory as environment variable $CUTLASS_PATH
evoformer_attn ......... [93m[NO][0m ....... [93m[NO][0m
fused_lamb ............. [93m[NO][0m ....... [92m[OKAY][0m
fused_lion ............. [93m[NO][0m ....... [92m[OKAY][0m
inference_core_ops ..... [93m[NO][0m ....... [92m[OKAY][0m
cutlass_ops ............ [93m[NO][0m ....... [92m[OKAY][0m
quantizer .............. [93m[NO][0m ....... [92m[OKAY][0m
ragged_device_ops ...... [93m[NO][0m ....... [92m[OKAY][0m
ragged_ops ............. [93m[NO][0m ....... [92m[OKAY][0m
random_ltd ............. [93m[NO][0m ....... [92m[OKAY][0m
[93m [WARNING] [0m using untested triton version (3.0.0), only 1.0.0 is known to be compatible
sparse_attn ............ [93m[NO][0m ....... [93m[NO][0m
spatial_inference ...... [93m[NO][0m ....... [92m[OKAY][0m
transformer ............ [93m[NO][0m ....... [92m[OKAY][0m
stochastic_transformer . [93m[NO][0m ....... [92m[OKAY][0m
transformer_inference .. [93m[NO][0m ....... [92m[OKAY][0m
--------------------------------------------------
DeepSpeed general environment info:
torch install path ............... ['/home/user01/miniconda3/envs/glamm_2/lib/python3.10/site-packages/torch']
torch version .................... 1.13.1+cu117
deepspeed install path ........... ['/home/user01/miniconda3/envs/glamm_2/lib/python3.10/site-packages/deepspeed']
deepspeed info ................... 0.12.6, unknown, unknown
torch cuda version ............... 11.7
torch hip version ................ None
nvcc version ..................... 12.6
deepspeed wheel compiled w. ...... torch 1.13, cuda 11.7
shared memory (/dev/shm) size .... 1007.84 GB
[2024-09-12 14:10:53,599] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-09-12 14:10:54,964] [WARNING] [runner.py:202:fetch_hostfile] Unable to find hostfile, will proceed with training with local resources only.
Detected CUDA_VISIBLE_DEVICES=0: setting --include=localhost:0
[2024-09-12 14:10:54,971] [INFO] [runner.py:571:main] cmd = /home/user01/miniconda3/envs/glamm_2/bin/python -u -m deepspeed.launcher.launch --world_info=eyJsb2NhbGhvc3QiOiBbMF19 --master_addr=127.0.0.1 --master_port=6000 --enable_each_rank_log=None train.py --version MBZUAI/GLaMM-FullScope --dataset_dir dataset/final_data/ --vision_pretrained checkpoints/sam_vit_h_4b8939.pth.1 --exp_name output --lora_r 8 --lr 1e-5 --pretrained --use_segm_data --seg_dataset GranDf_GCG --segm_sample_rates 1 --val_dataset GranDf_GCG --epochs 10 --steps_per_epoch 500 --mask_validation
[2024-09-12 14:10:56,321] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-09-12 14:10:57,644] [INFO] [launch.py:145:main] WORLD INFO DICT: {'localhost': [0]}
[2024-09-12 14:10:57,644] [INFO] [launch.py:151:main] nnodes=1, num_local_procs=1, node_rank=0
[2024-09-12 14:10:57,644] [INFO] [launch.py:162:main] global_rank_mapping=defaultdict(<class 'list'>, {'localhost': [0]})
[2024-09-12 14:10:57,644] [INFO] [launch.py:163:main] dist_world_size=1
[2024-09-12 14:10:57,644] [INFO] [launch.py:165:main] Setting CUDA_VISIBLE_DEVICES=0
[2024-09-12 14:10:59,360] [INFO] [real_accelerator.py:161:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[92m---- Initialized tokenizer from: MBZUAI/GLaMM-FullScope ----[0m
[92m---- Initialized model from: MBZUAI/GLaMM-FullScope ----[0m
[92m---- Initialized Global Image Encoder (vision tower) from: openai/clip-vit-large-patch14-336 ----[0m
Making trainable: base_model.model.model.embed_tokens.weight, Shape: torch.Size([32007, 4096])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.0.weight, Shape: torch.Size([1024, 1026, 1, 1])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.0.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.1.weight, Shape: torch.Size([1024, 1026, 1, 1])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.1.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.2.weight, Shape: torch.Size([1024, 1026, 1, 1])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.2.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.3.weight, Shape: torch.Size([1024, 1026, 1, 1])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.input_conv.3.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.0.conv.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.0.gn.weight, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.0.gn.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.1.conv.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.1.gn.weight, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.1.gn.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.2.conv.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.2.gn.weight, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.2.gn.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.3.conv.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.3.gn.weight, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.3.gn.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.4.conv.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.4.gn.weight, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.mlvl_fuse.fuse_convs.4.gn.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.0.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.0.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.1.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.1.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.2.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.2.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.3.weight, Shape: torch.Size([1024, 1024, 3, 3])
Making trainable: base_model.model.model.region_encoder.roi_align.pconvs.3.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.0.weight, Shape: torch.Size([256, 4])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.0.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.2.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.2.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.3.weight, Shape: torch.Size([1024, 256])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.3.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.5.weight, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.pos_embedd.5.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.region_encoder.roi_align.updims.weight, Shape: torch.Size([4096, 1024])
Making trainable: base_model.model.model.region_encoder.roi_align.updims.bias, Shape: torch.Size([4096])
Making trainable: base_model.model.model.region_encoder.roi_align.flatten_linear.weight, Shape: torch.Size([1024, 200704])
Making trainable: base_model.model.model.region_encoder.roi_align.flatten_linear.bias, Shape: torch.Size([1024])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.q_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.q_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.k_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.k_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.v_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.v_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.out_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.self_attn.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm1.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.q_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.q_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.k_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.k_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.v_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.v_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.out_proj.weight, Shape: torch.Size([256, 128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_token_to_image.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm2.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm2.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.mlp.lin1.weight, Shape: torch.Size([2048, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.mlp.lin1.bias, Shape: torch.Size([2048])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.mlp.lin2.weight, Shape: torch.Size([256, 2048])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.mlp.lin2.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm3.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm3.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm4.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.norm4.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.q_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.q_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.k_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.k_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.v_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.v_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.out_proj.weight, Shape: torch.Size([256, 128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.0.cross_attn_image_to_token.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.q_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.q_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.k_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.k_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.v_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.v_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.out_proj.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.self_attn.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm1.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.q_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.q_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.k_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.k_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.v_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.v_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.out_proj.weight, Shape: torch.Size([256, 128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_token_to_image.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm2.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm2.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.mlp.lin1.weight, Shape: torch.Size([2048, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.mlp.lin1.bias, Shape: torch.Size([2048])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.mlp.lin2.weight, Shape: torch.Size([256, 2048])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.mlp.lin2.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm3.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm3.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm4.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.norm4.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.q_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.q_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.k_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.k_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.v_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.v_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.out_proj.weight, Shape: torch.Size([256, 128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.layers.1.cross_attn_image_to_token.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.q_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.q_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.k_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.k_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.v_proj.weight, Shape: torch.Size([128, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.v_proj.bias, Shape: torch.Size([128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.out_proj.weight, Shape: torch.Size([256, 128])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.final_attn_token_to_image.out_proj.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.norm_final_attn.weight, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.transformer.norm_final_attn.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_token.weight, Shape: torch.Size([1, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.mask_tokens.weight, Shape: torch.Size([4, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_upscaling.0.weight, Shape: torch.Size([256, 64, 2, 2])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_upscaling.0.bias, Shape: torch.Size([64])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_upscaling.1.weight, Shape: torch.Size([64])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_upscaling.1.bias, Shape: torch.Size([64])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_upscaling.3.weight, Shape: torch.Size([64, 32, 2, 2])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_upscaling.3.bias, Shape: torch.Size([32])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.0.layers.0.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.0.layers.0.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.0.layers.1.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.0.layers.1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.0.layers.2.weight, Shape: torch.Size([32, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.0.layers.2.bias, Shape: torch.Size([32])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.1.layers.0.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.1.layers.0.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.1.layers.1.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.1.layers.1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.1.layers.2.weight, Shape: torch.Size([32, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.1.layers.2.bias, Shape: torch.Size([32])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.2.layers.0.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.2.layers.0.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.2.layers.1.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.2.layers.1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.2.layers.2.weight, Shape: torch.Size([32, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.2.layers.2.bias, Shape: torch.Size([32])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.3.layers.0.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.3.layers.0.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.3.layers.1.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.3.layers.1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.3.layers.2.weight, Shape: torch.Size([32, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.output_hypernetworks_mlps.3.layers.2.bias, Shape: torch.Size([32])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_prediction_head.layers.0.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_prediction_head.layers.0.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_prediction_head.layers.1.weight, Shape: torch.Size([256, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_prediction_head.layers.1.bias, Shape: torch.Size([256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_prediction_head.layers.2.weight, Shape: torch.Size([4, 256])
Making trainable: base_model.model.model.grounding_encoder.mask_decoder.iou_prediction_head.layers.2.bias, Shape: torch.Size([4])
Making trainable: base_model.model.model.text_hidden_fcs.0.0.weight, Shape: torch.Size([4096, 4096])
Making trainable: base_model.model.model.text_hidden_fcs.0.0.bias, Shape: torch.Size([4096])
Making trainable: base_model.model.model.text_hidden_fcs.0.2.weight, Shape: torch.Size([256, 4096])
Making trainable: base_model.model.model.text_hidden_fcs.0.2.bias, Shape: torch.Size([256])
Making trainable: base_model.model.lm_head.weight, Shape: torch.Size([32007, 4096])
[92m---- Total parameters: ----8025218096[0m
[92m---- Trainable parameters: ----587427044[0m
[2024-09-12 14:11:29,322] [INFO] [logging.py:96:log_dist] [Rank -1] DeepSpeed info: version=0.12.6, git-hash=unknown, git-branch=unknown
[2024-09-12 14:11:29,322] [INFO] [comm.py:637:init_distributed] cdb=None
[2024-09-12 14:11:29,322] [INFO] [comm.py:668:init_distributed] Initializing TorchBackend in DeepSpeed with backend nccl
[2024-09-12 14:11:31,635] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Flops Profiler Enabled: False
ninja: no work to do.
Time to load fused_adam op: 0.12441205978393555 seconds
[2024-09-12 14:11:31,765] [INFO] [logging.py:96:log_dist] [Rank 0] Using DeepSpeed Optimizer param name adamw as basic optimizer
[2024-09-12 14:11:31,765] [INFO] [logging.py:96:log_dist] [Rank 0] Removing param_group that has no 'params' in the basic Optimizer
[2024-09-12 14:11:32,022] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Basic Optimizer = FusedAdam
[2024-09-12 14:11:32,022] [INFO] [utils.py:56:is_zero_supported_optimizer] Checking ZeRO support for optimizer=FusedAdam type=<class 'deepspeed.ops.adam.fused_adam.FusedAdam'>
[2024-09-12 14:11:32,022] [INFO] [logging.py:96:log_dist] [Rank 0] Creating torch.bfloat16 ZeRO stage 2 optimizer
[2024-09-12 14:11:32,022] [INFO] [stage_1_and_2.py:148:__init__] Reduce bucket size 500000000
[2024-09-12 14:11:32,022] [INFO] [stage_1_and_2.py:149:__init__] Allgather bucket size 500000000
[2024-09-12 14:11:32,022] [INFO] [stage_1_and_2.py:150:__init__] CPU Offload: False
[2024-09-12 14:11:32,022] [INFO] [stage_1_and_2.py:151:__init__] Round robin gradient partitioning: False
[2024-09-12 14:11:32,782] [INFO] [utils.py:791:see_memory_usage] Before initializing optimizer states
[2024-09-12 14:11:32,783] [INFO] [utils.py:792:see_memory_usage] MA 17.2 GB         Max_MA 18.29 GB         CA 18.7 GB         Max_CA 19 GB 
[2024-09-12 14:11:32,783] [INFO] [utils.py:799:see_memory_usage] CPU Virtual Memory:  used = 48.09 GB, percent = 2.4%
[2024-09-12 14:11:32,874] [INFO] [utils.py:791:see_memory_usage] After initializing optimizer states
[2024-09-12 14:11:32,875] [INFO] [utils.py:792:see_memory_usage] MA 21.58 GB         Max_MA 23.77 GB         CA 25.27 GB         Max_CA 25 GB 
[2024-09-12 14:11:32,875] [INFO] [utils.py:799:see_memory_usage] CPU Virtual Memory:  used = 48.09 GB, percent = 2.4%
[2024-09-12 14:11:32,875] [INFO] [stage_1_and_2.py:516:__init__] optimizer state initialized
[2024-09-12 14:11:32,959] [INFO] [utils.py:791:see_memory_usage] After initializing ZeRO optimizer
[2024-09-12 14:11:32,960] [INFO] [utils.py:792:see_memory_usage] MA 21.58 GB         Max_MA 21.58 GB         CA 25.27 GB         Max_CA 25 GB 
[2024-09-12 14:11:32,960] [INFO] [utils.py:799:see_memory_usage] CPU Virtual Memory:  used = 48.09 GB, percent = 2.4%
[2024-09-12 14:11:32,967] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed Final Optimizer = adamw
[2024-09-12 14:11:32,967] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed using configured LR scheduler = WarmupDecayLR
[2024-09-12 14:11:32,967] [INFO] [logging.py:96:log_dist] [Rank 0] DeepSpeed LR Scheduler = <deepspeed.runtime.lr_schedules.WarmupDecayLR object at 0x7fff2a2d2530>
[2024-09-12 14:11:32,967] [INFO] [logging.py:96:log_dist] [Rank 0] step=0, skipped=0, lr=[1e-05], mom=[(0.9, 0.95)]
[2024-09-12 14:11:32,969] [INFO] [config.py:984:print] DeepSpeedEngine configuration:
[2024-09-12 14:11:32,969] [INFO] [config.py:988:print]   activation_checkpointing_config  {
    "partition_activations": false, 
    "contiguous_memory_optimization": false, 
    "cpu_checkpointing": false, 
    "number_checkpoints": null, 
    "synchronize_checkpoint_boundary": false, 
    "profile": false
}
[2024-09-12 14:11:32,969] [INFO] [config.py:988:print]   aio_config ................... {'block_size': 1048576, 'queue_depth': 8, 'thread_count': 1, 'single_submit': False, 'overlap_events': True}
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   amp_enabled .................. False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   amp_params ................... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   autotuning_config ............ {
    "enabled": false, 
    "start_step": null, 
    "end_step": null, 
    "metric_path": null, 
    "arg_mappings": null, 
    "metric": "throughput", 
    "model_info": null, 
    "results_dir": "autotuning_results", 
    "exps_dir": "autotuning_exps", 
    "overwrite": true, 
    "fast": true, 
    "start_profile_step": 3, 
    "end_profile_step": 5, 
    "tuner_type": "gridsearch", 
    "tuner_early_stopping": 5, 
    "tuner_num_trials": 50, 
    "model_info_path": null, 
    "mp_size": 1, 
    "max_train_batch_size": null, 
    "min_train_batch_size": 1, 
    "max_train_micro_batch_size_per_gpu": 1.024000e+03, 
    "min_train_micro_batch_size_per_gpu": 1, 
    "num_tuning_micro_batch_sizes": 3
}
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   bfloat16_enabled ............. True
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   checkpoint_parallel_write_pipeline  False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   checkpoint_tag_validation_enabled  True
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   checkpoint_tag_validation_fail  False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   comms_config ................. <deepspeed.comm.config.DeepSpeedCommsConfig object at 0x7fff2c644be0>
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   communication_data_type ...... None
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   compression_config ........... {'weight_quantization': {'shared_parameters': {'enabled': False, 'quantizer_kernel': False, 'schedule_offset': 0, 'quantize_groups': 1, 'quantize_verbose': False, 'quantization_type': 'symmetric', 'quantize_weight_in_forward': False, 'rounding': 'nearest', 'fp16_mixed_quantize': False, 'quantize_change_ratio': 0.001}, 'different_groups': {}}, 'activation_quantization': {'shared_parameters': {'enabled': False, 'quantization_type': 'symmetric', 'range_calibration': 'dynamic', 'schedule_offset': 1000}, 'different_groups': {}}, 'sparse_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'row_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'head_pruning': {'shared_parameters': {'enabled': False, 'method': 'topk', 'schedule_offset': 1000}, 'different_groups': {}}, 'channel_pruning': {'shared_parameters': {'enabled': False, 'method': 'l1', 'schedule_offset': 1000}, 'different_groups': {}}, 'layer_reduction': {'enabled': False}}
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   curriculum_enabled_legacy .... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   curriculum_params_legacy ..... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   data_efficiency_config ....... {'enabled': False, 'seed': 1234, 'data_sampling': {'enabled': False, 'num_epochs': 1000, 'num_workers': 0, 'curriculum_learning': {'enabled': False}}, 'data_routing': {'enabled': False, 'random_ltd': {'enabled': False, 'layer_token_lr_schedule': {'enabled': False}}}}
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   data_efficiency_enabled ...... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   dataloader_drop_last ......... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   disable_allgather ............ False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   dump_state ................... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   dynamic_loss_scale_args ...... None
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_enabled ........... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_gas_boundary_resolution  1
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_layer_name ........ bert.encoder.layer
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_layer_num ......... 0
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_max_iter .......... 100
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_stability ......... 1e-06
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_tol ............... 0.01
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   eigenvalue_verbose ........... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   elasticity_enabled ........... False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   flops_profiler_config ........ {
    "enabled": false, 
    "recompute_fwd_factor": 0.0, 
    "profile_step": 1, 
    "module_depth": -1, 
    "top_modules": 1, 
    "detailed": true, 
    "output_file": null
}
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   fp16_auto_cast ............... None
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   fp16_enabled ................. False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   fp16_master_weights_and_gradients  False
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   global_rank .................. 0
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   grad_accum_dtype ............. None
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   gradient_accumulation_steps .. 10
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   gradient_clipping ............ 1.0
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   gradient_predivide_factor .... 1.0
[2024-09-12 14:11:32,970] [INFO] [config.py:988:print]   graph_harvesting ............. False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   hybrid_engine ................ enabled=False max_out_tokens=512 inference_tp_size=1 release_inference_cache=False pin_parameters=True tp_gather_partition_size=8
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   initial_dynamic_scale ........ 1
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   load_universal_checkpoint .... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   loss_scale ................... 1.0
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   memory_breakdown ............. False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   mics_hierarchial_params_gather  False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   mics_shard_size .............. -1
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   monitor_config ............... tensorboard=TensorBoardConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') wandb=WandbConfig(enabled=False, group=None, team=None, project='deepspeed') csv_monitor=CSVConfig(enabled=False, output_path='', job_name='DeepSpeedJobName') enabled=False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   nebula_config ................ {
    "enabled": false, 
    "persistent_storage_path": null, 
    "persistent_time_interval": 100, 
    "num_of_version_in_retention": 2, 
    "enable_nebula_load": true, 
    "load_path": null
}
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   optimizer_legacy_fusion ...... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   optimizer_name ............... adamw
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   optimizer_params ............. {'lr': 1e-05, 'weight_decay': 0.0, 'betas': (0.9, 0.95)}
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   pipeline ..................... {'stages': 'auto', 'partition': 'best', 'seed_layers': False, 'activation_checkpoint_interval': 0, 'pipe_partitioned': True, 'grad_partitioned': True}
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   pld_enabled .................. False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   pld_params ................... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   prescale_gradients ........... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   scheduler_name ............... WarmupDecayLR
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   scheduler_params ............. {'total_num_steps': 5000, 'warmup_min_lr': 0, 'warmup_max_lr': 1e-05, 'warmup_num_steps': 100, 'warmup_type': 'linear'}
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   seq_parallel_communication_data_type  torch.float32
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   sparse_attention ............. None
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   sparse_gradients_enabled ..... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   steps_per_print .............. 10
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   train_batch_size ............. 20
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   train_micro_batch_size_per_gpu  2
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   use_data_before_expert_parallel_  False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   use_node_local_storage ....... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   wall_clock_breakdown ......... False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   weight_quantization_config ... None
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   world_size ................... 1
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   zero_allow_untested_optimizer  False
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   zero_config .................. stage=2 contiguous_gradients=True reduce_scatter=True reduce_bucket_size=500000000 use_multi_rank_bucket_allreduce=True allgather_partitions=True allgather_bucket_size=500000000 overlap_comm=True load_from_fp32_weights=True elastic_checkpoint=False offload_param=None offload_optimizer=None sub_group_size=1,000,000,000 cpu_offload_param=None cpu_offload_use_pin_memory=None cpu_offload=None prefetch_bucket_size=50,000,000 param_persistence_threshold=100,000 model_persistence_threshold=sys.maxsize max_live_parameters=1,000,000,000 max_reuse_distance=1,000,000,000 gather_16bit_weights_on_model_save=False stage3_gather_fp16_weights_on_model_save=False ignore_unused_parameters=True legacy_stage1=False round_robin_gradients=False zero_hpz_partition_size=1 zero_quantized_weights=False zero_quantized_nontrainable_weights=False zero_quantized_gradients=False mics_shard_size=-1 mics_hierarchical_params_gather=False memory_efficient_linear=True pipeline_loading_checkpoint=False override_module_apply=True
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   zero_enabled ................. True
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   zero_force_ds_cpu_optimizer .. True
[2024-09-12 14:11:32,971] [INFO] [config.py:988:print]   zero_optimization_stage ...... 2
[2024-09-12 14:11:32,971] [INFO] [config.py:974:print_user_config]   json = {
    "train_micro_batch_size_per_gpu": 2, 
    "gradient_accumulation_steps": 10, 
    "optimizer": {
        "type": "AdamW", 
        "params": {
            "lr": 1e-05, 
            "weight_decay": 0.0, 
            "betas": [0.9, 0.95]
        }
    }, 
    "scheduler": {
        "type": "WarmupDecayLR", 
        "params": {
            "total_num_steps": 5.000000e+03, 
            "warmup_min_lr": 0, 
            "warmup_max_lr": 1e-05, 
            "warmup_num_steps": 100, 
            "warmup_type": "linear"
        }
    }, 
    "fp16": {
        "enabled": false
    }, 
    "bf16": {
        "enabled": true
    }, 
    "gradient_clipping": 1.0, 
    "zero_optimization": {
        "stage": 2, 
        "contiguous_gradients": true, 
        "overlap_comm": true, 
        "reduce_scatter": true, 
        "reduce_bucket_size": 5.000000e+08, 
        "allgather_bucket_size": 5.000000e+08
    }
}
[92m----GCG-Train: GranDf-GCG dataset initialized----[0m
[2024-09-12 14:11:46,695] [INFO] [launch.py:315:sigkill_handler] Killing subprocess 408328
[2024-09-12 14:11:46,695] [ERROR] [launch.py:321:sigkill_handler] ['/home/user01/miniconda3/envs/glamm_2/bin/python', '-u', 'train.py', '--local_rank=0', '--version', 'MBZUAI/GLaMM-FullScope', '--dataset_dir', 'dataset/final_data/', '--vision_pretrained', 'checkpoints/sam_vit_h_4b8939.pth.1', '--exp_name', 'output', '--lora_r', '8', '--lr', '1e-5', '--pretrained', '--use_segm_data', '--seg_dataset', 'GranDf_GCG', '--segm_sample_rates', '1', '--val_dataset', 'GranDf_GCG', '--epochs', '10', '--steps_per_epoch', '500', '--mask_validation'] exits with return code = 1
